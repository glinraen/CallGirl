/home/vishnu/.rvm/rubies/ruby-2.2.1/bin/ruby -r ./siteconf20150928-7702-5xmbbe.rb extconf.rb 
checking for random()... yes
checking for srandom()... yes
checking for rand()... yes
checking for srand()... yes
creating Makefile

make "DESTDIR=" clean

make "DESTDIR="
compiling markdown.c
markdown.c:104:15: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
 static struct kw comment = { "!--", 3, 0 };
               ^
markdown.c: In function ‘quoteblock’:
markdown.c:670:17: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
  char *prefix = "class";
                 ^
markdown.c:678:12: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
      prefix="id";
            ^
In file included from markdown.c:16:0:
markdown.c: In function ‘addfootnote’:
cstring.h:22:24: warning: operation on ‘f->footnotes->size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:836:23: note: in expansion of macro ‘EXPAND’
     Footnote *foot = &EXPAND(*f->footnotes);
                       ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
markdown.c:838:5: note: in expansion of macro ‘CREATE’
     CREATE(foot->tag);
     ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
markdown.c:839:5: note: in expansion of macro ‘CREATE’
     CREATE(foot->link);
     ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
markdown.c:840:5: note: in expansion of macro ‘CREATE’
     CREATE(foot->title);
     ^
cstring.h:22:24: warning: operation on ‘foot->tag.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:844:2: note: in expansion of macro ‘EXPAND’
  EXPAND(foot->tag) = T(p->text)[j];
  ^
cstring.h:22:24: warning: operation on ‘foot->tag.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:846:5: note: in expansion of macro ‘EXPAND’
     EXPAND(foot->tag) = 0;
     ^
cstring.h:22:24: warning: operation on ‘foot->link.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:851:2: note: in expansion of macro ‘EXPAND’
  EXPAND(foot->link) = T(p->text)[j++];
  ^
cstring.h:22:24: warning: operation on ‘foot->link.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:852:5: note: in expansion of macro ‘EXPAND’
     EXPAND(foot->link) = 0;
     ^
cstring.h:22:24: warning: operation on ‘foot->title.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:879:6: note: in expansion of macro ‘EXPAND’
      EXPAND(foot->title) = T(p->text)[j++];
      ^
cstring.h:22:24: warning: operation on ‘foot->title.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
markdown.c:885:2: note: in expansion of macro ‘EXPAND’
  EXPAND(foot->title) = 0;
  ^
markdown.c: In function ‘mkd_compile’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
markdown.c:1089:5: note: in expansion of macro ‘CREATE’
     CREATE(doc->ctx->in);
     ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
markdown.c:1091:5: note: in expansion of macro ‘CREATE’
     CREATE(*doc->ctx->footnotes);
     ^
compiling generate.c
In file included from generate.c:16:0:
generate.c: In function ‘push’:
cstring.h:22:24: warning: operation on ‘f->in.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:37:2: note: in expansion of macro ‘EXPAND’
  EXPAND(f->in) = *bfr++;
  ^
generate.c: In function ‘Qchar’:
cstring.h:22:24: warning: operation on ‘f->Q.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:120:9: note: in expansion of macro ‘EXPAND’
  cur = &EXPAND(f->Q);
         ^
cstring.h:22:24: warning: operation on ‘cur->b_text.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:127:5: note: in expansion of macro ‘EXPAND’
     EXPAND(cur->b_text) = c;
     ^
generate.c: In function ‘Qem’:
cstring.h:22:24: warning: operation on ‘f->Q.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:172:17: note: in expansion of macro ‘EXPAND’
     block *p = &EXPAND(f->Q);
                 ^
cstring.h:22:24: warning: operation on ‘f->Q.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:179:13: note: in expansion of macro ‘EXPAND’
     memset(&EXPAND(f->Q), 0, sizeof(block));
             ^
generate.c: In function ‘___mkd_reparse’:
cstring.h:22:24: warning: operation on ‘sub.in.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:196:5: note: in expansion of macro ‘EXPAND’
     EXPAND(sub.in) = 0;
     ^
generate.c: In function ‘puturl’:
generate.c:227:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring("&amp;", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:229:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring("&lt;", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:231:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring("%22", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:235:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring("  ", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:237:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qprintf(f, "%%%02X", c);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: At top level:
generate.c:408:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     _aprotocol( "https://" ), 
     ^
generate.c:409:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     _aprotocol( "http://" ), 
     ^
generate.c:410:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     _aprotocol( "news://" ),
     ^
generate.c:411:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     _aprotocol( "ftp://" ), 
     ^
generate.c: In function ‘isautoprefix’:
generate.c:423:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (i=0, p=protocol; i < NRPROTOCOLS; i++, p++)
                             ^
generate.c: At top level:
generate.c:447:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
 static linkytype imaget = { 0, 0, "<img src=\"", "\"",
 ^
generate.c:447:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:448:9: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
         1, " alt=\"", "\" />", DENY_IMG|INSIDE_TAG, IS_URL };
         ^
generate.c:448:9: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:449:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
 static linkytype linkt  = { 0, 0, "<a href=\"", "\"",
 ^
generate.c:449:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:450:30: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
                              0, ">", "</a>", DENY_A, IS_URL };
                              ^
generate.c:450:30: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:460:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { "id:", 3, "<a id=\"", "\"", 0, ">", "</a>", 0, IS_URL },
     ^
generate.c:460:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:460:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:460:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:460:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:461:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { "raw:", 4, 0, 0, 0, 0, 0, DENY_HTML, 0 },
     ^
generate.c:462:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { "lang:", 5, "<span lang=\"", "\"", 0, ">", "</span>", 0, 0 },
     ^
generate.c:462:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:462:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:462:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:462:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:463:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { "abbr:", 5, "<abbr title=\"", "\"", 0, ">", "</abbr>", 0, 0 },
     ^
generate.c:463:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:463:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:463:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:463:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:464:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { "class:", 6, "<span class=\"", "\"", 0, ">", "</span>", 0, 0 },
     ^
generate.c:464:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:464:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:464:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:464:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c: In function ‘pseudo’:
generate.c:477:30: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for ( i=0, r=specials; i < NR(specials); i++,r++ ) {
                              ^
generate.c: In function ‘linkyformat’:
generate.c:545:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      if ( ref->height ) Qprintf(f," height=\"%d\"", ref->height);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:546:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      if ( ref->width ) Qprintf(f, " width=\"%d\"", ref->width);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:550:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring(" title=\"", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
In file included from generate.c:16:0:
generate.c: In function ‘linkylinky’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
generate.c:578:5: note: in expansion of macro ‘CREATE’
     CREATE(name);
     ^
generate.c: In function ‘cputc’:
generate.c:633:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     case '&':   Qstring("&amp;", f); break;
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:634:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     case '>':   Qstring("&gt;", f); break;
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:635:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     case '<':   Qstring("&lt;", f); break;
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘mangle’:
generate.c:648:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("&#", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:649:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, COINTOSS() ? "x%02x;" : "%02d;", *((unsigned char*)(s++)) );
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: In function ‘code’:
generate.c:712:6: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qstring("  ", f);
      ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘delspan’:
generate.c:723:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<del>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:725:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</del>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘codespan’:
generate.c:740:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<code>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:742:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</code>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘process_possible_link’:
generate.c:819:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("<a href=\"", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:822:6: warning: passing argument 1 of ‘mangle’ discards ‘const’ qualifier from pointer target type [enabled by default]
      mangle("mailto:", 7, f);
      ^
generate.c:645:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mangle(char *s, int len, MMIOT *f)
 ^
generate.c:825:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("\">", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:827:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("</a>", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:834:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("</a>", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘smartyquote’:
generate.c:937:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qprintf(f, "&r%cquo;", typeofquote);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:943:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, "&l%cquo;", typeofquote);
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: At top level:
generate.c:985:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'s>",      "rsquo",  0 },
     ^
generate.c:985:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:986:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'t>",      "rsquo",  0 },
     ^
generate.c:986:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:987:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'re>",     "rsquo",  0 },
     ^
generate.c:987:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:988:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'ll>",     "rsquo",  0 },
     ^
generate.c:988:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:989:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'ve>",     "rsquo",  0 },
     ^
generate.c:989:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:990:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'m>",      "rsquo",  0 },
     ^
generate.c:990:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:991:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '\'', "'d>",      "rsquo",  0 },
     ^
generate.c:991:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:992:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '-',  "--",       "mdash",  1 },
     ^
generate.c:992:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:993:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '-',  "<->",      "ndash",  0 },
     ^
generate.c:993:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:994:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '.',  "...",      "hellip", 2 },
     ^
generate.c:994:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:995:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '.',  ". . .",    "hellip", 4 },
     ^
generate.c:995:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:996:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '(',  "(c)",      "copy",   2 },
     ^
generate.c:996:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:997:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '(',  "(r)",      "reg",    2 },
     ^
generate.c:997:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:998:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '(',  "(tm)",     "trade",  3 },
     ^
generate.c:998:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:999:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '3',  "<3/4>",    "frac34", 2 },
     ^
generate.c:999:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1000:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '3',  "<3/4ths>", "frac34", 2 },
     ^
generate.c:1000:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1001:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '1',  "<1/2>",    "frac12", 2 },
     ^
generate.c:1001:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1002:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '1',  "<1/4>",    "frac14", 2 },
     ^
generate.c:1002:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1003:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '1',  "<1/4th>",  "frac14", 2 },
     ^
generate.c:1003:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1004:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     { '&',  "&#0;",      0,       3 },
     ^
generate.c: In function ‘smartypants’:
generate.c:1019:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for ( i=0; i < NRSMART; i++)
                  ^
generate.c:1022:3: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
   Qprintf(f, "&%s;", smarties[i].entity);
   ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1044:8: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
        Qstring("&ldquo;", f);
        ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1046:8: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
        Qstring("&rdquo;", f);
        ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘text’:
generate.c:1108:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  case 3:     Qstring(tag_text(f) ? "  " : "<br/>", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1112:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("&gt;", f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1118:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("&quot;", f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1126:8: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
        Qstring("![", f);
        ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1141:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("<sup>",f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1147:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("</sup>", f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1186:7: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
       case '&':   Qstring("&amp;", f);
       ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1188:7: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
       case '<':   Qstring("&lt;", f);
       ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1205:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("&lt;", f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1213:4: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Qstring("&amp;", f);
    ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘printheader’:
generate.c:1232:5: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qprintf(f, "<h%d", pp->hnumber);
     ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1234:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, " id=\"", pp->hnumber);
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1235:2: warning: passing argument 3 of ‘mkd_string_to_anchor’ from incompatible pointer type [enabled by default]
  mkd_string_to_anchor(T(pp->text->text), S(pp->text->text), Qchar, f);
  ^
In file included from generate.c:17:0:
markdown.h:135:13: note: expected ‘void (*)(int,  void *)’ but argument is of type ‘void (*)(int,  struct MMIOT *)’
 extern void mkd_string_to_anchor(char*,int, void(*)(int,void*), void*);
             ^
generate.c:1241:5: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qprintf(f, "</h%d>", pp->hnumber);
     ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: At top level:
generate.c:1247:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
 static char* alignments[] = { "", " align=\"center\"", " align=\"left\"",
 ^
generate.c:1247:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1247:1: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1248:7: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
       " align=\"right\"" };
       ^
generate.c: In function ‘splat’:
generate.c:1259:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<tr>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1270:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      alignments[ (colno < S(align)) ? T(align)[colno] : a_NONE ]);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1272:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, "</%s>\n", block);
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1278:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qprintf(f, "<%s></%s>\n", block, block);
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1281:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</tr>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
In file included from generate.c:16:0:
generate.c: In function ‘printtable’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
generate.c:1306:5: note: in expansion of macro ‘CREATE’
     CREATE(align);
     ^
cstring.h:22:24: warning: operation on ‘align.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:1319:2: note: in expansion of macro ‘EXPAND’
  EXPAND(align) = ( first == ':' ) ? (( last == ':') ? a_CENTER : a_LEFT)
  ^
generate.c:1324:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<table>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1325:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<thead>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1326:5: warning: passing argument 2 of ‘splat’ discards ‘const’ qualifier from pointer target type [enabled by default]
     hcols = splat(hdr, "th", align, 0, f);
     ^
generate.c:1253:1: note: expected ‘char *’ but argument is of type ‘const char *’
 splat(Line *p, char *block, Istring align, int force, MMIOT *f)
 ^
generate.c:1327:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</thead>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
In file included from generate.c:16:0:
cstring.h:22:24: warning: operation on ‘align.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
generate.c:1333:6: note: in expansion of macro ‘EXPAND’
      EXPAND(align) = a_NONE;
      ^
generate.c:1335:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<tbody>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1337:2: warning: passing argument 2 of ‘splat’ discards ‘const’ qualifier from pointer target type [enabled by default]
  splat(body, "td", align, 1, f);
  ^
generate.c:1253:1: note: expected ‘char *’ but argument is of type ‘const char *’
 splat(Line *p, char *block, Istring align, int force, MMIOT *f)
 ^
generate.c:1338:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</tbody>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1339:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</table>\n", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘printblock’:
generate.c:1350:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     static char *Begin[] = { "", "<p>", "<p style=\"text-align:center;\">"  };
     ^
generate.c:1350:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1350:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1351:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     static char *End[]   = { "", "</p>","</p>" };
     ^
generate.c:1351:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1351:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
generate.c:1359:3: warning: passing argument 1 of ‘push’ discards ‘const’ qualifier from pointer target type [enabled by default]
   push("\003\n", 2, f);
   ^
generate.c:34:1: note: expected ‘char *’ but argument is of type ‘const char *’
 push(char *bfr, int size, MMIOT *f)
 ^
generate.c:1365:7: warning: passing argument 1 of ‘push’ discards ‘const’ qualifier from pointer target type [enabled by default]
       push("\n", 1, f);
       ^
generate.c:34:1: note: expected ‘char *’ but argument is of type ‘const char *’
 push(char *bfr, int size, MMIOT *f)
 ^
generate.c: In function ‘printcode’:
generate.c:1382:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("<pre><code>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1394:5: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
     Qstring("</code></pre>", f);
     ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c: In function ‘htmlify’:
generate.c:1421:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, arguments ? "<%s %s>" : "<%s>", block, arguments);
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1426:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("\n\n", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
generate.c:1430:3: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
   Qprintf(f, "</%s>", block);
   ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: In function ‘listdisplay’:
generate.c:1465:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, "<%cl", (typ==UL)?'u':'o');
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1467:6: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
      Qprintf(f, " type=a");
      ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1468:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, ">\n");
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c:1471:6: warning: passing argument 2 of ‘htmlify’ discards ‘const’ qualifier from pointer target type [enabled by default]
      htmlify(p->down, "li", p->ident, f);
      ^
generate.c:1417:1: note: expected ‘char *’ but argument is of type ‘const char *’
 htmlify(Paragraph *p, char *block, char *arguments, MMIOT *f)
 ^
generate.c:1475:2: warning: passing argument 2 of ‘Qprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qprintf(f, "</%cl>\n", (typ==UL)?'u':'o');
  ^
generate.c:155:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qprintf(MMIOT *f, char *fmt, ...)
 ^
generate.c: In function ‘display’:
generate.c:1501:2: warning: passing argument 2 of ‘htmlify’ discards ‘const’ qualifier from pointer target type [enabled by default]
  htmlify(p->down, p->ident ? "div" : "blockquote", p->ident, f);
  ^
generate.c:1417:1: note: expected ‘char *’ but argument is of type ‘const char *’
 htmlify(Paragraph *p, char *block, char *arguments, MMIOT *f)
 ^
generate.c:1517:2: warning: passing argument 1 of ‘Qstring’ discards ‘const’ qualifier from pointer target type [enabled by default]
  Qstring("<hr />", f);
  ^
generate.c:135:1: note: expected ‘char *’ but argument is of type ‘const char *’
 Qstring(char *s, MMIOT *f)
 ^
compiling dumptree.c
dumptree.c: In function ‘Pptype’:
dumptree.c:23:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case WHITESPACE: return "whitespace";
                      ^
dumptree.c:24:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case CODE      : return "code";
                      ^
dumptree.c:25:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case QUOTE     : return "quote";
                      ^
dumptree.c:26:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case MARKUP    : return "markup";
                      ^
dumptree.c:27:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case HTML      : return "html";
                      ^
dumptree.c:28:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case DL        : return "dl";
                      ^
dumptree.c:29:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case UL        : return "ul";
                      ^
dumptree.c:30:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case OL        : return "ol";
                      ^
dumptree.c:31:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case LISTITEM  : return "item";
                      ^
dumptree.c:32:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case HDR       : return "header";
                      ^
dumptree.c:33:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case HR        : return "hr";
                      ^
dumptree.c:34:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case TABLE     : return "table";
                      ^
dumptree.c:35:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case SOURCE    : return "source";
                      ^
dumptree.c:36:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case STYLE     : return "style";
                      ^
dumptree.c:37:22: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     default        : return "mystery node!";
                      ^
In file included from markdown.h:4:0,
                 from dumptree.c:8:
dumptree.c: In function ‘pushpfx’:
cstring.h:22:24: warning: operation on ‘sp->size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
dumptree.c:44:24: note: in expansion of macro ‘EXPAND’
     struct frame *q = &EXPAND(*sp);
                        ^
dumptree.c: In function ‘dumptree’:
dumptree.c:104:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     static char *Begin[] = { 0, "P", "center" };
     ^
dumptree.c:104:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
In file included from markdown.h:4:0,
                 from dumptree.c:8:
dumptree.c: In function ‘mkd_dump’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
dumptree.c:143:2: note: in expansion of macro ‘CREATE’
  CREATE(stack);
  ^
compiling Csio.c
In file included from Csio.c:4:0:
Csio.c: In function ‘Csputc’:
cstring.h:22:24: warning: operation on ‘iot->size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
Csio.c:14:5: note: in expansion of macro ‘EXPAND’
     EXPAND(*iot) = c;
     ^
compiling css.c
In file included from css.c:16:0:
css.c: In function ‘mkd_css’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
css.c:49:2: note: in expansion of macro ‘CREATE’
  CREATE(f);
  ^
compiling mkdio.c
In file included from mkdio.c:13:0:
mkdio.c: In function ‘queue’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
mkdio.c:48:5: note: in expansion of macro ‘CREATE’
     CREATE(p->text);
     ^
cstring.h:22:24: warning: operation on ‘p->text.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
mkdio.c:59:3: note: in expansion of macro ‘EXPAND’
   EXPAND(p->text) = ' ';
   ^
cstring.h:22:24: warning: operation on ‘p->text.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
mkdio.c:63:6: note: in expansion of macro ‘EXPAND’
      EXPAND(p->text) = c;
      ^
cstring.h:22:24: warning: operation on ‘p->text.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
mkdio.c:67:5: note: in expansion of macro ‘EXPAND’
     EXPAND(p->text) = 0;
     ^
mkdio.c: In function ‘populate’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
mkdio.c:103:5: note: in expansion of macro ‘CREATE’
     CREATE(line);
     ^
cstring.h:22:24: warning: operation on ‘line.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
mkdio.c:119:6: note: in expansion of macro ‘EXPAND’
      EXPAND(line) = c;
      ^
compiling basename.c
compiling xml.c
xml.c: In function ‘mkd_xmlchar’:
xml.c:26:17: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case '<':   return "&lt;";
                 ^
xml.c:27:17: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case '>':   return "&gt;";
                 ^
xml.c:28:17: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case '&':   return "&amp;";
                 ^
xml.c:29:17: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case '"':   return "&quot;";
                 ^
xml.c:30:17: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
     case '\'':  return "&apos;";
                 ^
xml.c:33:3: warning: return discards ‘const’ qualifier from pointer target type [enabled by default]
   return "";
   ^
In file included from xml.c:16:0:
xml.c: In function ‘mkd_xml’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
xml.c:67:5: note: in expansion of macro ‘CREATE’
     CREATE(f);
     ^
compiling toc.c
In file included from toc.c:13:0:
toc.c: In function ‘mkd_toc’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
toc.c:26:5: note: in expansion of macro ‘CREATE’
     CREATE(res);
     ^
toc.c:40:4: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Csprintf(&res,  "%*s</li>\n", srcp->hnumber, "");
    ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:44:7: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
       last_hnumber-1,"");
       ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:49:4: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
    Csprintf(&res, "\n%*s<ul>\n", srcp->hnumber, "");
    ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:52:7: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
       Csprintf(&res, "%*s<li><a href=\"#", srcp->hnumber, "");
       ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:53:7: warning: passing argument 3 of ‘mkd_string_to_anchor’ from incompatible pointer type [enabled by default]
       mkd_string_to_anchor(T(srcp->text->text), S(srcp->text->text), Csputc, &res);
       ^
In file included from toc.c:14:0:
markdown.h:135:13: note: expected ‘void (*)(int,  void *)’ but argument is of type ‘void (*)(int,  struct Cstring *)’
 extern void mkd_string_to_anchor(char*,int, void(*)(int,void*), void*);
             ^
toc.c:54:7: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
       Csprintf(&res, "\">");
       ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:56:7: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
       Csprintf(&res, "</a>");
       ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
toc.c:64:4: warning: passing argument 2 of ‘Csprintf’ discards ‘const’ qualifier from pointer target type [enabled by default]
    last_hnumber, "", last_hnumber, "");
    ^
In file included from toc.c:13:0:
cstring.h:73:12: note: expected ‘char *’ but argument is of type ‘const char *’
 extern int Csprintf(Cstring *, char *, ...);
            ^
compiling tags.c
In file included from tags.c:4:0:
tags.c: In function ‘mkd_define_tag’:
cstring.h:22:24: warning: operation on ‘blocktags.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
tags.c:15:21: note: in expansion of macro ‘EXPAND’
     struct kw *p = &EXPAND(blocktags);
                     ^
tags.c: In function ‘mkd_prepare_tags’:
tags.c:78:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("STYLE");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:79:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("SCRIPT");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:80:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("ADDRESS");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:81:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("BDO");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:82:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("BLOCKQUOTE");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:83:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("CENTER");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:84:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("DFN");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:85:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("DIV");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:86:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("OBJECT");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:87:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H1");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:88:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H2");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:89:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H3");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:90:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H4");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:91:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H5");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:92:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("H6");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:93:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("LISTING");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:94:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("NOBR");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:95:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("UL");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:96:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("P");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:97:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("OL");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:98:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("DL");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:99:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("PLAINTEXT");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:100:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("PRE");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:101:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("TABLE");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:102:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("WBR");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:103:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("XMP");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:104:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     SC("HR");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:105:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     SC("BR");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:106:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("IFRAME");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
tags.c:107:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     KW("MAP");
     ^
tags.c:13:1: note: expected ‘char *’ but argument is of type ‘const char *’
 mkd_define_tag(char *id, int selfclose)
 ^
compiling html5.c
html5.c: In function ‘mkd_with_html5_tags’:
html5.c:15:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("ASIDE", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:16:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("FOOTER", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:17:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("HEADER", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:18:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("HGROUP", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:19:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("NAV", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:20:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("SECTION", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
html5.c:21:5: warning: passing argument 1 of ‘mkd_define_tag’ discards ‘const’ qualifier from pointer target type [enabled by default]
     mkd_define_tag("ARTICLE", 0);
     ^
In file included from html5.c:3:0:
tags.h:16:6: note: expected ‘char *’ but argument is of type ‘const char *’
 void mkd_define_tag(char *, int);
      ^
compiling resource.c
In file included from resource.c:16:0:
resource.c: In function ‘___mkd_initmmiot’:
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
resource.c:92:2: note: in expansion of macro ‘CREATE’
  CREATE(f->in);
  ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
resource.c:93:2: note: in expansion of macro ‘CREATE’
  CREATE(f->out);
  ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
resource.c:94:2: note: in expansion of macro ‘CREATE’
  CREATE(f->Q);
  ^
cstring.h:21:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define CREATE(x) T(x) = (void*)(S(x) = (x).alloc = 0)
                          ^
resource.c:99:6: note: in expansion of macro ‘CREATE’
      CREATE(*f->footnotes);
      ^
compiling rdiscount.c
rdiscount.c: In function ‘rb_rdiscount_to_html’:
rdiscount.c:18:5: warning: implicit declaration of function ‘rb_rdiscount__get_flags’ [-Wimplicit-function-declaration]
     int flags = rb_rdiscount__get_flags(self);
     ^
rdiscount.c:18:5: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
rdiscount.c: In function ‘rb_rdiscount_toc_content’:
rdiscount.c:55:5: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
     VALUE buf = rb_str_buf_new(4096);
     ^
compiling docheader.c
compiling emmatch.c
In file included from emmatch.c:16:0:
emmatch.c: In function ‘emfill’:
cstring.h:22:24: warning: operation on ‘p->b_text.size’ may be undefined [-Wsequence-point]
 #define EXPAND(x) (S(x)++)[(S(x) < (x).alloc) \
                        ^
emmatch.c:79:4: note: in expansion of macro ‘EXPAND’
    EXPAND(p->b_text) = p->b_char;
    ^
linking shared-object rdiscount.so

make "DESTDIR=" install
/usr/bin/install -m 0755 rdiscount.so ./.gem.20150928-7702-rp9jfr
